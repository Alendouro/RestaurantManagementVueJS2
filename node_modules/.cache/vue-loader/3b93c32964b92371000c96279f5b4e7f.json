{"remainingRequest":"/home/alendouro/WebDevelopment/RestaurantManagementVueJS2/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/alendouro/WebDevelopment/RestaurantManagementVueJS2/src/pages/Dashboard/DashboardCashier.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/alendouro/WebDevelopment/RestaurantManagementVueJS2/src/pages/Dashboard/DashboardCashier.vue","mtime":1546762763036},{"path":"/home/alendouro/WebDevelopment/RestaurantManagementVueJS2/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/alendouro/WebDevelopment/RestaurantManagementVueJS2/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/alendouro/WebDevelopment/RestaurantManagementVueJS2/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/alendouro/WebDevelopment/RestaurantManagementVueJS2/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n\nimport TablesAPI from \"../../packages/api/Tables.js\";\nimport MealsAPI from \"../../packages/api/Meals.js\";\nimport ItemsAPI from \"../../packages/api/Items.js\";\nimport OrderAPI from \"../../packages/api/Orders.js\";\nimport InvoiceAPI from \"../../packages/api/Invoice.js\";\nimport InvoiceItemsAPI from \"../../packages/api/InvoiceItems.js\";\nimport toastr from 'toastr';\nimport _ from 'lodash';\nimport swal from \"sweetalert\";\n\nexport default {\n  data() {\n    return {\n      toggles: {\n        invoices: true,\n        invoiceDetail: false\n      },\n      invoices: {\n        pending: [],\n        paid: [],\n        notPaid: []\n      },\n      invoiceSelectedDetails: {\n        invoice: null,\n        orders: [],\n        paymentDetail: {\n          name: \"\",\n          nif: \"\"\n        }\n      }\n    };\n  },\n  methods: {\n    getInvoice(){\n      InvoiceAPI.getInvoices(['pending'], false, true, true, null, null, null).then(invoices => {\n        this.invoices.pending = invoices.data;\n      });\n    },\n    groupedItems(items, columns){\n      return _.chunk(items, columns);\n    },\n    getInvoiceItems(invoiceID){\n      InvoiceItemsAPI.getInvoiceItems(invoiceID).then(items => {\n        this.invoiceSelectedDetails.orders = items.data;\n      });\n    },\n    getInvoicePaid(){\n      InvoiceAPI.getPaid(true, null).then(r => {\n        this.invoices.paid = r.data;\n      });\n    },\n    toggle(section, invoice){\n      this.hideAllSections(false);\n\n      if(section === \"invoiceDetails\"){\n        this.toggles.invoiceDetail = true;\n        this.invoiceSelectedDetails.invoice = invoice;\n        this.getInvoiceItems(invoice.id);\n        return;\n      }\n\n      if(section === 'invoices'){\n        this.toggles.invoices = true;\n      }\n    },\n    updateMakePayment(){\n      let pattern = /^\\d{9}$/;\n      if(!this.invoiceSelectedDetails.paymentDetail.nif.match(pattern)){\n          toastr.error('NIF is invalid', 'Error');\n          return false;\n      }\n\n      if(this.invoiceSelectedDetails.paymentDetail.name === \"\"){\n        toastr.error('Name is mandatory', 'Error');\n        return false;\n      }\n\n      InvoiceAPI.updateInvoice({\n        name: this.invoiceSelectedDetails.paymentDetail.name,\n        nif: this.invoiceSelectedDetails.paymentDetail.nif\n      }, this.invoiceSelectedDetails.invoice.id).then(response => {\n        if(response.status === 400){\n          swal(response.error.message, ' ', 'error', {\n            buttons: false,\n          });\n          return;\n        }\n\n        if(response.status === 200){\n          swal('Payment made successffully', ' ', 'success', {\n            buttons: false,\n          });\n        }\n\n        // Remove this invoice from the array\n        const invPending = this.invoices.pending;\n\n        _.remove(invPending, (inv) => {\n            return inv.id === this.invoiceSelectedDetails.invoice.id;\n        });\n\n        this.invoices.pending = invPending;\n\n        // Show all the invoices\n        this.hideAllSections(false);\n        this.toggles.invoices = true;\n\n        // Reset name and nif fields\n        this.invoiceSelectedDetails.paymentDetail.name = \"\";\n        this.invoiceSelectedDetails.paymentDetail.nif = \"\";\n      });\n    },\n\n    // -----------------   Auxiliary methods\n    hideAllSections(show){\n      for (let key in this.toggles) {\n        if (this.toggles.hasOwnProperty(key)) {\n          this.toggles[key] = (!!show); // either show or hide the sections\n        }\n      }\n    },\n    invoicesPaginate(direction){\n      if(direction === 'last'){\n        InvoiceAPI.getPaid(true, this.invoices.paid.current_page - 1).then(r => {\n          this.invoices.paid = r.data;\n        });\n      }else{\n        InvoiceAPI.getPaid(true, this.invoices.paid.current_page + 1).then(r => {\n          this.invoices.paid = r.data;\n        });\n      }\n    },\n    downloadInvoice(invoiceID){\n      InvoiceAPI.getDownloadPDF(invoiceID).then(r => {\n        let blob = new Blob([r.data], {type: 'application/pdf'});\n        let link = document.createElement('a');\n        link.href = window.URL.createObjectURL(blob);\n        link.download = 'invoice_'+ invoiceID +'.pdf';\n        link.click();\n      });\n    }\n  },\n  created(){\n    this.getInvoice();\n    this.getInvoicePaid();\n  },\n};\n",{"version":3,"sources":["DashboardCashier.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2HA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"DashboardCashier.vue","sourceRoot":"src/pages/Dashboard","sourcesContent":["<template>\n  <div class=\"content\">\n    <div class=\"md-layout\">\n      <div class=\"md-layout-item\">\n        <md-button class=\"md-default\" v-show=\"!toggles.invoices\" @click=\"toggle('invoices', null)\"><md-icon >keyboard_arrow_left</md-icon></md-button>\n        <!-- INVOICE LIST -->\n        <div v-if=\"toggles.invoices\">\n          <h3 class=\"d-inline\">INVOICES</h3><small>  pending</small>\n          <div class=\"row\" v-for=\"invoices in groupedItems(this.invoices.pending, 4)\" :key=\"invoices.id\">\n            <div class=\"col-md-3\" v-for=\"invoice in invoices\" :key=\"invoice.id\">\n              <md-card>\n                <md-card-header data-background-color=\"green\">\n                  <h4 class=\"title\">Table {{ invoice.meal.table_number }}</h4>\n                </md-card-header>\n                <md-card-content>\n                  <md-button class=\"md-info md-block\" @click=\"toggle('invoiceDetails', invoice)\">DETAILS</md-button>\n                </md-card-content>\n              </md-card>\n            </div>\n          </div>\n          <h1 class=\"text-center\" v-show=\"invoices.pending.length === 0\">NO INVOICES</h1>\n\n        </div>\n\n        <!-- INVOICE DETAILS -->\n        <div v-if=\"toggles.invoiceDetail\">\n          <div class=\"row\">\n            <div class=\"col-md-4\">\n              <h4><md-icon >insert_drive_file</md-icon>INVOICE DETAILS</h4>\n              <h4><md-icon >fastfood</md-icon> {{ invoiceSelectedDetails.invoice.meal.table_number }}</h4>\n              <h4><md-icon >person_pin</md-icon> {{ invoiceSelectedDetails.invoice.meal.waiter.name}}</h4>\n              <hr>\n              <h4>{{ this.invoiceSelectedDetails.paymentDetail.name}}</h4>\n              <h4>{{ this.invoiceSelectedDetails.paymentDetail.nif }}</h4>\n            </div>\n            <div class=\"col-md-8\">\n              <md-field>\n                <label>Name</label>\n                <md-input v-model=\"invoiceSelectedDetails.paymentDetail.name\"></md-input>\n              </md-field>\n              <md-field>\n                <label>NIF</label>\n                <md-input v-model=\"invoiceSelectedDetails.paymentDetail.nif\"></md-input>\n              </md-field>\n              <md-button class=\"md-info md-block\" @click=\"updateMakePayment()\">PAY</md-button>\n\n            </div>\n          </div>\n\n          <div class=\"row\">\n            <div class=\"col-md-12\">\n              <md-card>\n                <md-card-header data-background-color=\"green\">\n                  <h4 class=\"title\">Orders</h4>\n                  <p class=\"category\">TOTAL: {{ invoiceSelectedDetails.invoice.total_price }}â‚¬</p>\n                </md-card-header>\n                <md-card-content>\n                  <table class=\"table\">\n                    <thead>\n                    <tr>\n                      <th>Item</th>\n                      <th>Quantity</th>\n                      <th>Unit price</th>\n                      <th>Sub price</th>\n                    </tr>\n                    </thead>\n                    <tbody>\n                    <tr v-for=\"order in invoiceSelectedDetails.orders\" :key=\"order.id\">\n                      <td class=\"pt-4\">{{ order.item.name }}</td>\n                      <td class=\"pt-4\">{{ order.quantity }}</td>\n                      <td class=\"pt-4\">{{ order.unit_price }}â‚¬</td>\n                      <td class=\"pt-4\">{{ order.sub_total_price }}â‚¬</td>\n                    </tr>\n                    </tbody>\n                  </table>\n                </md-card-content>\n              </md-card>\n            </div>\n          </div>\n        </div>\n        <div class=\"row\" v-if=\"invoices.paid.length !== 0\">\n          <div class=\"col-md-12\">\n            <md-card>\n              <md-card-header data-background-color=\"green\">\n                <h4 class=\"title\">Invoices</h4> <small>paid</small>\n              </md-card-header>\n              <md-card-content>\n                <table class=\"table\">\n                  <thead>\n                  <tr>\n                    <th>ID</th>\n                    <th>Name</th>\n                    <th>NIF</th>\n                    <th>DATE</th>\n                    <th></th>\n                  </tr>\n                  </thead>\n                  <tbody>\n                  <tr v-for=\"(invoice) in invoices.paid.data\" :key=\"invoice.id\">\n                    <td class=\"pt-4\">{{ invoice.id }}</td>\n                    <td class=\"pt-4\">{{ invoice.name }}</td>\n                    <td class=\"pt-4\">{{ invoice.nif }}</td>\n                    <td class=\"pt-4\">{{ invoice.created_at }}</td>\n                    <td class=\"p-0\">\n                      <md-button class=\"md-block md-success\" @click=\"downloadInvoice(invoice.id)\">\n                        <md-icon >cloud_download</md-icon>\n                      </md-button>\n                    </td>\n                  </tr>\n                  </tbody>\n                </table>\n                <md-button :disabled=\"invoices.paid.prev_page_url === null\" @click=\"invoicesPaginate('last')\">LAST</md-button>\n                <md-button :disabled=\"invoices.paid.next_page_url === null\" @click=\"invoicesPaginate('next')\">NEXT</md-button>\n              </md-card-content>\n            </md-card>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n<script>\n\nimport TablesAPI from \"../../packages/api/Tables.js\";\nimport MealsAPI from \"../../packages/api/Meals.js\";\nimport ItemsAPI from \"../../packages/api/Items.js\";\nimport OrderAPI from \"../../packages/api/Orders.js\";\nimport InvoiceAPI from \"../../packages/api/Invoice.js\";\nimport InvoiceItemsAPI from \"../../packages/api/InvoiceItems.js\";\nimport toastr from 'toastr';\nimport _ from 'lodash';\nimport swal from \"sweetalert\";\n\nexport default {\n  data() {\n    return {\n      toggles: {\n        invoices: true,\n        invoiceDetail: false\n      },\n      invoices: {\n        pending: [],\n        paid: [],\n        notPaid: []\n      },\n      invoiceSelectedDetails: {\n        invoice: null,\n        orders: [],\n        paymentDetail: {\n          name: \"\",\n          nif: \"\"\n        }\n      }\n    };\n  },\n  methods: {\n    getInvoice(){\n      InvoiceAPI.getInvoices(['pending'], false, true, true, null, null, null).then(invoices => {\n        this.invoices.pending = invoices.data;\n      });\n    },\n    groupedItems(items, columns){\n      return _.chunk(items, columns);\n    },\n    getInvoiceItems(invoiceID){\n      InvoiceItemsAPI.getInvoiceItems(invoiceID).then(items => {\n        this.invoiceSelectedDetails.orders = items.data;\n      });\n    },\n    getInvoicePaid(){\n      InvoiceAPI.getPaid(true, null).then(r => {\n        this.invoices.paid = r.data;\n      });\n    },\n    toggle(section, invoice){\n      this.hideAllSections(false);\n\n      if(section === \"invoiceDetails\"){\n        this.toggles.invoiceDetail = true;\n        this.invoiceSelectedDetails.invoice = invoice;\n        this.getInvoiceItems(invoice.id);\n        return;\n      }\n\n      if(section === 'invoices'){\n        this.toggles.invoices = true;\n      }\n    },\n    updateMakePayment(){\n      let pattern = /^\\d{9}$/;\n      if(!this.invoiceSelectedDetails.paymentDetail.nif.match(pattern)){\n          toastr.error('NIF is invalid', 'Error');\n          return false;\n      }\n\n      if(this.invoiceSelectedDetails.paymentDetail.name === \"\"){\n        toastr.error('Name is mandatory', 'Error');\n        return false;\n      }\n\n      InvoiceAPI.updateInvoice({\n        name: this.invoiceSelectedDetails.paymentDetail.name,\n        nif: this.invoiceSelectedDetails.paymentDetail.nif\n      }, this.invoiceSelectedDetails.invoice.id).then(response => {\n        if(response.status === 400){\n          swal(response.error.message, ' ', 'error', {\n            buttons: false,\n          });\n          return;\n        }\n\n        if(response.status === 200){\n          swal('Payment made successffully', ' ', 'success', {\n            buttons: false,\n          });\n        }\n\n        // Remove this invoice from the array\n        const invPending = this.invoices.pending;\n\n        _.remove(invPending, (inv) => {\n            return inv.id === this.invoiceSelectedDetails.invoice.id;\n        });\n\n        this.invoices.pending = invPending;\n\n        // Show all the invoices\n        this.hideAllSections(false);\n        this.toggles.invoices = true;\n\n        // Reset name and nif fields\n        this.invoiceSelectedDetails.paymentDetail.name = \"\";\n        this.invoiceSelectedDetails.paymentDetail.nif = \"\";\n      });\n    },\n\n    // -----------------   Auxiliary methods\n    hideAllSections(show){\n      for (let key in this.toggles) {\n        if (this.toggles.hasOwnProperty(key)) {\n          this.toggles[key] = (!!show); // either show or hide the sections\n        }\n      }\n    },\n    invoicesPaginate(direction){\n      if(direction === 'last'){\n        InvoiceAPI.getPaid(true, this.invoices.paid.current_page - 1).then(r => {\n          this.invoices.paid = r.data;\n        });\n      }else{\n        InvoiceAPI.getPaid(true, this.invoices.paid.current_page + 1).then(r => {\n          this.invoices.paid = r.data;\n        });\n      }\n    },\n    downloadInvoice(invoiceID){\n      InvoiceAPI.getDownloadPDF(invoiceID).then(r => {\n        let blob = new Blob([r.data], {type: 'application/pdf'});\n        let link = document.createElement('a');\n        link.href = window.URL.createObjectURL(blob);\n        link.download = 'invoice_'+ invoiceID +'.pdf';\n        link.click();\n      });\n    }\n  },\n  created(){\n    this.getInvoice();\n    this.getInvoicePaid();\n  },\n};\n</script>\n\n<!-- Add \"scoped\" attribute to limit CSS to this component only -->\n<style scoped> \n\n</style>\n"]}]}