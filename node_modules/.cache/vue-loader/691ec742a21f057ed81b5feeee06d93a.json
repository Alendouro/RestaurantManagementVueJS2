{"remainingRequest":"/home/alendouro/WebDevelopment/RestaurantManagementVueJS2/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/alendouro/WebDevelopment/RestaurantManagementVueJS2/src/pages/Dashboard/DashboardWaiter.vue?vue&type=style&index=0&id=79979387&scoped=true&lang=css&","dependencies":[{"path":"/home/alendouro/WebDevelopment/RestaurantManagementVueJS2/src/pages/Dashboard/DashboardWaiter.vue","mtime":1545829119036},{"path":"/home/alendouro/WebDevelopment/RestaurantManagementVueJS2/node_modules/css-loader/index.js","mtime":499162500000},{"path":"/home/alendouro/WebDevelopment/RestaurantManagementVueJS2/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/home/alendouro/WebDevelopment/RestaurantManagementVueJS2/node_modules/postcss-loader/lib/index.js","mtime":499162500000},{"path":"/home/alendouro/WebDevelopment/RestaurantManagementVueJS2/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/alendouro/WebDevelopment/RestaurantManagementVueJS2/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n.add-meal{\n  position: fixed !important; bottom: 10px; right: 10px; z-index: 9999;\n}\n\n.item-choose{\n  padding: 10px; background: linear-gradient(60deg, #66bb6a, #43a047); color: white;\n  cursor: pointer;\n}\n",{"version":3,"sources":["DashboardWaiter.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA8UA;AACA;AACA;;AAEA;AACA;AACA;AACA","file":"DashboardWaiter.vue","sourceRoot":"src/pages/Dashboard","sourcesContent":["<template>\n  <div class=\"content\">\n    <div class=\"md-layout\">\n      <md-button class=\"md-just-icon md-round md-success add-meal\" @click='toggle(\"addMeal\", null, null)'><md-icon >add</md-icon></md-button>\n      <div class=\"md-layout-item\">\n        <md-button class=\"md-default\" @click=\"toggle('backToActiveMeals', null, null)\" v-show=\"!toggles.activeMeals\"><md-icon >keyboard_arrow_left</md-icon></md-button>\n        <div v-if=\"toggles.activeMeals\">\n          <h3>ACTIVE MEALS</h3>\n          <div class=\"row\" v-for=\"meals in groupedItems(myActiveMeals, 4)\" :key=\"meals.id\">\n            <div class=\"col-md-3\" v-for=\"meal in meals\" :key=\"meal.id\">\n              <md-card>\n                <md-card-header data-background-color=\"green\">\n                  <h4 class=\"title\">Table {{ meal.table_number }}</h4>\n                </md-card-header>\n                <md-card-content>\n                  <md-button class=\"md-info md-block\" @click=\"toggle('chooseItemType', meal.id, meal.table_number)\">ADD ITEM</md-button>\n                  <md-button class=\"md-info md-block\" @click=\"toggle('viewOrdersMeal', meal.id, meal.table_number)\">DETAILS</md-button>\n                  <md-button class=\"md-danger md-block\" @click=\"closeMeal(meal.id)\">CLOSE MEAL</md-button>\n                </md-card-content>\n              </md-card>\n            </div>\n          </div>\n        </div>\n\n        <div v-if=\"toggles.addItemToMeal\">\n          <h4>Adding dishes do table {{ this.mealSelected.table_number }}</h4>\n          <div class=\"row\">\n            <div class=\"col-md-6\">\n              <md-button class=\"md-info md-block\" @click=\"toggle('insertItemDishes', null, null)\">DISHES</md-button>\n            </div>\n            <div class=\"col-md-6\">\n              <md-button class=\"md-info md-block\" @click=\"toggle('insertItemDrinks', null, null)\">DRINKS</md-button>\n            </div>\n          </div>\n          <!-- ADD DISH TO MEAL SECTION -->\n          <div v-if=\"toggles.insertItemDrinks\">\n            <div class=\"row\" v-for=\"items in groupedItems(allItems.drinks, 3)\" :key=\"items.id\">\n              <div class=\"col-md-4\" v-for=\"item in items\" :key=\"item.id\">\n                <div class=\"table text-center text-white p-4 rounded\">\n                  <div class=\"item-choose text-center rounded\" @click=\"createOrder(item.id, item.name)\">{{ item.name }}</div>\n                </div>\n              </div>\n            </div>\n          </div>\n          <div v-if=\"toggles.insertItemDishes\">\n            <div class=\"row\" v-for=\"items in groupedItems(allItems.dishes, 3)\" :key=\"items.id\">\n              <div class=\"col-md-4\" v-for=\"item in items\" md=\"4\" :key=\"item.id\">\n                <div class=\"table text-center text-white p-4 rounded\">\n                  <div class=\"item-choose text-center rounded\" @click=\"createOrder(item.id, item.name)\">{{ item.name }}</div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n\n        <!-- ADD MEAL SECTION -->\n        <div v-if=\"toggles.addMeal\">\n          <h3>ADD MEAL</h3>\n          <div class=\"row\">\n            <div class=\"col-md-12\">\n              <label for=\"table_number\" class=\"grey-text\">Table</label>\n              <select id=\"table_number\" class=\"form-control\" v-model=\"createMeal.table\">\n                <option v-for=\"table in freeTables\" :value=\"table.table_number\" :key=\"table.id\">{{ table.table_number }}</option>\n              </select>\n              <md-button class=\"md-info md-block\" @click=\"insertMeal\">ADD MEAL</md-button>\n            </div>\n          </div>\n        </div>\n\n        <!-- MEAL DETAILS -->\n        <div v-if=\"toggles.mealOrders\">\n          <h4>MEAL DETAILS</h4>\n          <h4>TABLE {{ mealSelected.table_number }} @ {{ mealSelected.total }}€</h4>\n          <div class=\"row\">\n            <div class=\"col-md-12\">\n              <md-card>\n                <md-card-header data-background-color=\"green\">\n                  <h4 class=\"title\">Orders</h4>\n                </md-card-header>\n                <md-card-content>\n                  <table class=\"table\">\n                    <thead>\n                    <tr>\n                      <th>Item</th>\n                      <th>Price</th>\n                      <th>Time</th>\n                      <th><md-icon>border_color</md-icon></th>\n                    </tr>\n                    </thead>\n                    <tbody>\n                    <tr v-for=\"order in mealSelected.orders\" :key=\"order.id\">\n                      <td class=\"pt-4\">{{ order.item.name }}</td>\n                      <td class=\"pt-4\">{{ order.item.price }}€</td>\n                      <td class=\"pt-4\">{{ order.created_at }}</td>\n                      <td><md-button class=\"m-0\">DELIVERED</md-button></td>\n                    </tr>\n                    </tbody>\n                  </table>\n                </md-card-content>\n              </md-card>\n            </div>\n          </div>\n        </div>\n\n      </div>\n    </div>\n  </div>\n</template>\n<script>\n\nimport TablesAPI from \"../../packages/api/Tables.js\";\nimport MealsAPI from \"../../packages/api/Meals.js\";\nimport ItemsAPI from \"../../packages/api/Items.js\";\nimport OrderAPI from \"../../packages/api/Orders.js\";\nimport toastr from 'toastr';\nimport _ from 'lodash';\nimport swal from \"sweetalert\";\n\n\nexport default {\n  data() {\n    return {\n      user: [],\n      freeTables: [],\n      myActiveMeals: [],\n      createMeal: { table: 0 },\n      toggles:{\n        addMeal: false,\n        insertItemDishes: false,\n        insertItemDrinks: false,\n        chooseItemType: false,\n        activeMeals: true,\n        addItemToMeal: false,\n        mealOrders: false\n      },\n      allItems: {\n        drinks: [],\n        dishes: []\n      },\n      mealSelected: {\n        id: null,\n        table_number: null,\n        orders: [],\n        total: 0\n      },\n    };\n  },\n  methods: {\n    getFreeTables(){\n      TablesAPI.getFreeTables().then(response => {\n        this.freeTables = response.data;\n      });\n    },\n    getMyActiveMeals(){\n      MealsAPI.getMyActiveMeals().then(response => {\n        this.myActiveMeals = response.data;\n\n      });\n    },\n    getItems(){\n      // No need to paginate the results here\n      ItemsAPI.getItems('/api/items')\n        .then(items => {\n          if (items){\n            items.data.forEach((e, i) => {\n              if (e.type === 'dish'){\n                this.allItems.dishes.push(e);\n              }\n              if (e.type === 'drink'){\n                this.allItems.drinks.push(e);\n              }\n            });\n          }\n        });\n    },\n    getMealOrders(filters, mealID){\n      MealsAPI.getOrders(filters, mealID).then((orders) => {\n        const meal = this.mealSelected;\n        meal.orders = orders.data;\n        meal.total = _.sumBy(this.mealSelected.orders, (order) => {\n          return parseFloat(order.item.price);\n        });\n\n        this.mealSelected = meal;\n      });\n    },\n    groupedItems(items, columns){\n      return _.chunk(items, columns);\n    },\n    insertMeal(){\n      MealsAPI.postNewMeal(this.createMeal.table).then(response => {\n        // We need to add the table to the array of tables\n        this.myActiveMeals.push(response.data);\n\n        // Re-order the myactive meals\n        this.myActiveMeals = _.orderBy(this.myActiveMeals, ['table_number']);\n\n        if (response.status === 201){\n          // Remove from the array of free tables the one we just added\n          _.remove(this.freeTables, (currentTable) => {\n            return currentTable.table_number === this.createMeal.table;\n          });\n          swal('Meal registered with success', ' ', 'success');\n          return false;\n        }\n\n        if (response.status === 403){\n          swal(response.data.error.message, ' ', 'error');\n          return false;\n        }\n\n        swal(response.data.error.message, ' ', 'error');\n      })\n    },\n    toggle(section, mealID, table_number){\n      if(section === \"addMeal\"){\n        this.toggles.addMeal = true;\n        // Scroll to the bottom of the page in case there are several tables\n        window.scrollTo(0,document.body.scrollHeight);\n        return;\n      }\n\n      if(section === \"insertItemDishes\" || section === \"insertItemDrinks\"){\n        if(section === \"insertItemDishes\"){\n          this.toggles.insertItemDishes = true;\n          this.toggles.insertItemDrinks = false;\n        }else{\n          this.toggles.insertItemDrinks = true;\n          this.toggles.insertItemDishes = false;\n        }\n        return;\n      }\n\n      if(section === \"chooseItemType\"){\n        this.toggles.addItemToMeal = true;\n        this.toggles.insertItemDishes = true;\n        this.toggles.chooseItemType = true;\n        this.toggles.activeMeals = false;\n        this.mealSelected.id = mealID;\n        this.mealSelected.table_number = table_number;\n        this.toggles.addItemToMeal = true;\n        return;\n      }\n\n      if(section === \"backToActiveMeals\"){\n        this.toggles.addItemToMeal = false;\n        this.toggles.insertItemDishes = false;\n        this.toggles.chooseItemType = false;\n        this.toggles.activeMeals = true;\n        this.toggles.addItemToMeal = false;\n        this.toggles.mealOrders = false;\n        return;\n      }\n\n      if(section === \"viewOrdersMeal\"){\n        this.toggles.addItemToMeal = false;\n        this.toggles.insertItemDishes = false;\n        this.toggles.chooseItemType = false;\n        this.toggles.activeMeals = false;\n        this.mealSelected.id = mealID;\n        this.mealSelected.table_number = table_number;\n        this.toggles.addItemToMeal = false;\n        this.toggles.mealOrders = true;\n        this.getMealOrders([], mealID);\n      }\n    },\n    createOrder(itemID, itemName){\n      // TODO ME NEEDS TO WAIT 5 SECONDS AND BE ABLE TO CANCEL ORDER\n      OrderAPI.createOrder(this.mealSelected.id, itemID).then(response => {\n        // Check if there is an error\n        if (response){\n          toastr.success(itemName + ' added succesfully');\n        }\n      });\n    },\n    closeMeal(mealID){\n      MealsAPI.postCloseMeal([], mealID).then(response => {\n        // The error will represent that this meal has an order that wasn't delivered.\n        // This will prompt the system to ask the waiter if she/he would like\n        // to close the meal anyway and the meals not be considered.\n        if(response.data.errors){\n          swal(response.data.errors.message, {\n            icon: \"warning\",\n            buttons: {\n              cancel: \"No\",\n              catch: {\n                text: \"Delete dishes\",\n                value: \"delete\"\n              },\n            },\n          }).then((value) => {\n            switch (value) {\n              case \"delete\":\n                MealsAPI.postCloseMeal(['eliminateNotDelivered'], mealID).then(response => {\n                  // console.log(response);\n                  swal(\"Meal closed\", \"Your meal has been closed and all products different than 'delivered' set to 'not delivered'\", \"success\");\n                }).catch(error => {\n                  console.log(error);\n                });\n                this.removeMealFromArray(mealID);\n                break;\n            }\n          });\n\n          return;\n        }\n\n        this.removeMealFromArray(mealID);\n        swal(\"Meal has been closed successfully\", \"\", \"success\");\n\n      });\n    },\n    removeMealFromArray(mealID){\n      var meals = this.myActiveMeals.slice();\n      _.remove(meals, (meal) => {\n        return meal.id === parseInt(mealID);\n      });\n\n      this.myActiveMeals = meals;\n    }\n  },\n  created(){\n\n    this.getItems();\n    this.getMyActiveMeals();\n    this.getFreeTables();\n    this.user = this.$store.state.user;\n\n  },\n};\n</script>\n\n<!-- Add \"scoped\" attribute to limit CSS to this component only -->\n<style scoped> \n  .add-meal{\n    position: fixed !important; bottom: 10px; right: 10px; z-index: 9999;\n  }\n\n  .item-choose{\n    padding: 10px; background: linear-gradient(60deg, #66bb6a, #43a047); color: white;\n    cursor: pointer;\n  }\n</style>\n"]}]}