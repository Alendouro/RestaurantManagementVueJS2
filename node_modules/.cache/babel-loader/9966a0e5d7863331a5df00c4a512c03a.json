{"remainingRequest":"/home/alendouro/WebDevelopment/RestaurantManagementVueJS2/node_modules/babel-loader/lib/index.js!/home/alendouro/WebDevelopment/RestaurantManagementVueJS2/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/alendouro/WebDevelopment/RestaurantManagementVueJS2/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/alendouro/WebDevelopment/RestaurantManagementVueJS2/src/pages/Manager/Stats.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/alendouro/WebDevelopment/RestaurantManagementVueJS2/src/pages/Manager/Stats.vue","mtime":1546623817076},{"path":"/home/alendouro/WebDevelopment/RestaurantManagementVueJS2/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/alendouro/WebDevelopment/RestaurantManagementVueJS2/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/alendouro/WebDevelopment/RestaurantManagementVueJS2/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/alendouro/WebDevelopment/RestaurantManagementVueJS2/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.function.name\";\nimport \"core-js/modules/web.dom.iterable\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport UsersAPI from \"../../packages/api/Users.js\";\nimport StatsAPI from \"../../packages/api/Stats.js\";\nimport _ from 'lodash';\nimport Multiselect from 'vue-multiselect';\nimport StatsCard from \"../../../src/components/Cards/StatsCard.vue\";\nimport ChartCard from \"../../../src/components/Cards/ChartCard.vue\";\nexport default {\n  components: {\n    Multiselect: Multiselect,\n    ChartCard: ChartCard,\n    StatsCard: StatsCard\n  },\n  data: function data() {\n    return {\n      users: {\n        filters: {\n          user: {\n            active: {\n              id: null,\n              name: null,\n              type: null\n            },\n            options: [],\n            isLoading: false\n          }\n        }\n      },\n      performanceUser: {\n        data: {\n          labels: [],\n          series: [],\n          average: 0\n        },\n        options: {\n          low: 0,\n          high: 1,\n          chartPadding: {\n            top: 20,\n            right: 20,\n            bottom: 20,\n            left: 20\n          }\n        }\n      },\n      performanceOrders: {\n        data: {\n          labels: [],\n          series: []\n        },\n        options: {\n          low: 0,\n          high: 1,\n          chartPadding: {\n            top: 20,\n            right: 20,\n            bottom: 20,\n            left: 25\n          }\n        }\n      },\n      performanceMeals: {\n        data: {\n          labels: [],\n          series: []\n        },\n        options: {\n          low: 0,\n          high: 1,\n          chartPadding: {\n            top: 20,\n            right: 20,\n            bottom: 20,\n            left: 25\n          }\n        }\n      },\n      performanceMealsAverageTime: {\n        data: {\n          labels: [],\n          series: []\n        },\n        options: {\n          low: 0,\n          high: 1,\n          chartPadding: {\n            top: 20,\n            right: 20,\n            bottom: 20,\n            left: 25\n          }\n        }\n      },\n      performanceOrdersAverageMinutesPerMoth: [],\n      topCardsData: {\n        averageTimeCostumerSpentMeal: '...',\n        totalNumberOrders: '...',\n        totalNumberMeals: '...'\n      }\n    };\n  },\n  methods: {\n    searchUsers: function searchUsers(searchQuery) {\n      var _this = this;\n\n      if (searchQuery.length < 3) {\n        return;\n      }\n\n      var options = [];\n      this.users.filters.user.isLoading = true;\n      UsersAPI.getSearchUser(searchQuery).then(function (r) {\n        _this.users.filters.user.isLoading = false;\n        r.data.forEach(function (e) {\n          if (e.type === \"waiter\" || e.type === \"cook\") {\n            options.push({\n              id: e.id,\n              name: e.name + \" - \" + e.type,\n              type: e.type\n            });\n          }\n        });\n      });\n      this.users.filters.user.options = options;\n    },\n    getStatsUser: function getStatsUser() {\n      var _this2 = this;\n\n      StatsAPI.getUserPerformance(this.users.filters.user.active).then(function (r) {\n        // Calculate the average asked in the US 39\n        var average = _.sum(r.data.series) / r.data.series.length;\n        _this2.performanceUser.data.average = average.toFixed(2); // Need to set padding of the graph since it doesn't do it automatically\n        // which is a shame.\n\n        _this2.setLowHighOptionsGraph(_this2.performanceUser.options, r.data.series);\n\n        _this2.performanceUser.data.labels = r.data.labels; // Chartist's series needs to be an array inside of an array\n\n        _this2.performanceUser.data.series = [r.data.series];\n      });\n    },\n    getMealsHandled: function getMealsHandled() {\n      var _this3 = this;\n\n      StatsAPI.getMealsHandled().then(function (r) {\n        // Need to set padding of the graph since it doesn't do it automatically\n        // which is a shame.\n        _this3.setLowHighOptionsGraph(_this3.performanceMeals.options, r.data.series);\n\n        _this3.performanceMeals.data.labels = r.data.labels;\n        _this3.performanceMeals.data.series = [r.data.series]; // Calculate the total number of meals handled\n\n        _this3.topCardsData.totalNumberMeals = _.sum(r.data.series);\n      });\n    },\n    getOrdersHandled: function getOrdersHandled() {\n      var _this4 = this;\n\n      StatsAPI.getOrdersHandled().then(function (r) {\n        // Need to set padding of the graph since it doesn't do it automatically\n        // which is a shame.\n        _this4.setLowHighOptionsGraph(_this4.performanceOrders.options, r.data.series);\n\n        _this4.performanceOrders.data.labels = r.data.labels;\n        _this4.performanceOrders.data.series = [r.data.series]; // Calculate total number of orders handled in this restaurant\n\n        _this4.topCardsData.totalNumberOrders = _.sum(r.data.series);\n      });\n    },\n    getAverageTimeMeal: function getAverageTimeMeal() {\n      var _this5 = this;\n\n      StatsAPI.getAverageTimeSpentOnMeal().then(function (r) {\n        // Need to set padding of the graph since it doesn't do it automatically\n        // which is a shame.\n        _this5.setLowHighOptionsGraph(_this5.performanceMealsAverageTime.options, r.data.series);\n\n        _this5.performanceMealsAverageTime.data.labels = r.data.labels;\n        _this5.performanceMealsAverageTime.data.series = [r.data.series]; // Calculate the average on all months that a customer has spent in the restaurant\n\n        var average = _.sum(r.data.series) / r.data.series.length;\n        _this5.topCardsData.averageTimeCostumerSpentMeal = average.toFixed(2);\n      });\n    },\n    getAverageMinutesOrdersPerMonth: function getAverageMinutesOrdersPerMonth() {\n      var _this6 = this;\n\n      StatsAPI.getAverageMinutesOrdersPerMonth().then(function (r) {\n        console.log(_this6.performanceOrdersAverageMinutesPerMoth.length);\n        _this6.performanceOrdersAverageMinutesPerMoth = r.data;\n        console.log(_this6.performanceOrdersAverageMinutesPerMoth);\n      });\n    },\n    // ---- AUX METHODS\n    setLowHighOptionsGraph: function setLowHighOptionsGraph(options, series) {\n      options.low = 0;\n      options.high = _.max(series) + 80;\n    }\n  },\n  created: function created() {\n    this.getOrdersHandled();\n    this.getMealsHandled();\n    this.getAverageTimeMeal();\n    this.getAverageMinutesOrdersPerMonth();\n  }\n};",{"version":3,"sources":["Stats.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <div class=\"content\">\n    <div class=\"md-layout\">\n      <div class=\"md-layout-item\">\n        <div class=\"row\">\n          <div class=\"col-md-4\">\n            <stats-card data-background-color=\"green\">\n              <template slot=\"header\">\n                <md-tooltip md-direction=\"top\">Defines the average time a costumer spent in his meal</md-tooltip>\n                <md-icon>whatshot</md-icon>\n              </template>\n\n              <template slot=\"content\">\n                <p class=\"category\">Average time on meal</p>\n                <h3 class=\"title\">{{ topCardsData.averageTimeCostumerSpentMeal }} <small class=\"text-small\">minutes</small></h3>\n              </template>\n            </stats-card>\n          </div>\n          <div class=\"col-md-4\">\n            <stats-card data-background-color=\"green\">\n              <template slot=\"header\">\n                <md-tooltip md-direction=\"top\">Total number of delivered orders made in this restaurant</md-tooltip>\n                <md-icon>poll</md-icon>\n              </template>\n\n              <template slot=\"content\">\n                <p class=\"category\">Delivered orders</p>\n                <h3 class=\"title\">{{ topCardsData.totalNumberOrders }} <small class=\"text-small\">orders</small></h3>\n              </template>\n            </stats-card>\n          </div>\n          <div class=\"col-md-4\">\n            <stats-card data-background-color=\"green\">\n              <template slot=\"header\">\n                <md-tooltip md-direction=\"top\">Total number of meals</md-tooltip>\n                <md-icon>fastfood</md-icon>\n              </template>\n\n              <template slot=\"content\">\n                <p class=\"category\">Average orders per meal</p>\n                <h3 class=\"title\">{{ topCardsData.totalNumberMeals }} <small class=\"text-small\">meals</small></h3>\n              </template>\n            </stats-card>\n          </div>\n        </div>\n        <div class=\"row mb-2\">\n          <div class=\"col-md-10\">\n            <label for=\"stats_user\">User <small>search average performance of user</small></label>\n            <multiselect v-model=\"users.filters.user.active\"\n                         :options=\"users.filters.user.options\"\n                         @search-change=\"searchUsers\"\n                         :preserve-search=\"true\"\n                         :loading=\"users.filters.user.isLoading\"\n                         label=\"name\"\n                         track-by=\"name\"\n                         style=\"z-index: 9999;\" id=\"stats_user\"></multiselect>\n          </div>\n          <div class=\"col-md-1\">\n            <md-button class=\"md-success md-block bottom-column m-0 p-0\"\n                       @click=\"getStatsUser\"\n                       :disabled=\"users.filters.user.active.id === null\"><md-icon >show_chart</md-icon></md-button>\n          </div>\n        </div>\n        <div class=\"row\" v-if=\"performanceUser.data.labels.length > 0\">\n          <div class=\"col-md-12\">\n            <chart-card\n                    :chart-data=\"performanceUser.data\"\n                    :chart-options=\"performanceUser.options\"\n                    chart-type=\"Line\"\n                    data-background-color=\"green\">\n              <template slot=\"content\">\n                <h4 class=\"title\">{{ users.filters.user.active.type === \"cook\" ? \"Number of meals prepared\" : \"Number of orders served\"}}</h4>\n                <p class=\"category\">\n                  Average of {{ performanceUser.data.average }} {{ users.filters.user.active.type === \"cook\" ? \"meals prepared\" : \"orders served\" }}\n                </p>\n              </template>\n            </chart-card>\n          </div>\n        </div>\n        <div class=\"row\" v-if=\"performanceOrders.data.labels.length > 0\">\n          <div class=\"col-md-12\">\n            <chart-card\n                    :chart-data=\"performanceOrders.data\"\n                    :chart-options=\"performanceOrders.options\"\n                    chart-type=\"Line\"\n                    data-background-color=\"green\">\n              <template slot=\"content\">\n                <h4 class=\"title\">Total number of Orders</h4>\n              </template>\n            </chart-card>\n          </div>\n        </div>\n        <div class=\"row\" v-if=\"performanceMeals.data.labels.length > 0\">\n          <div class=\"col-md-12\">\n            <chart-card\n                    :chart-data=\"performanceMeals.data\"\n                    :chart-options=\"performanceMeals.options\"\n                    chart-type=\"Line\"\n                    data-background-color=\"green\">\n              <template slot=\"content\">\n                <h4 class=\"title\">Total number of Meals</h4>\n              </template>\n            </chart-card>\n          </div>\n        </div>\n        <div class=\"row\" v-if=\"performanceMealsAverageTime.data.labels.length > 0\">\n          <div class=\"col-md-12\">\n            <chart-card\n                    :chart-data=\"performanceMealsAverageTime.data\"\n                    :chart-options=\"performanceMealsAverageTime.options\"\n                    chart-type=\"Line\"\n                    data-background-color=\"green\">\n              <template slot=\"content\">\n                <h4 class=\"title\">Average time Meal</h4>\n              </template>\n            </chart-card>\n          </div>\n        </div>\n        <div class=\"row\">\n          <div class=\"col-md-12\">\n            <md-card v-if=\"performanceOrdersAverageMinutesPerMoth.length > 0\">\n              <md-card-header data-background-color=\"green\" id=\"mealDetails\">\n                <h6 class=\"title\">Average time it takes to handle each order grouped by items and month</h6>\n                <h6 class=\"title\"><md-icon>warning</md-icon>Should be using pagination in here but no time</h6>\n              </md-card-header>\n              <md-card-content>\n                <table class=\"table\">\n                  <thead>\n                  <tr>\n                    <th>#</th>\n                    <th>Item</th>\n                    <th>Month</th>\n                    <th>Average</th>\n\n                  </tr>\n                  </thead>\n                  <tbody>\n                  <tr v-for=\"(item, index) in performanceOrdersAverageMinutesPerMoth\" :key=\"item.id\">\n                    <td class=\"pt-4\">{{ index + 1 }}</td>\n                    <td class=\"pt-4\">{{ item.name }}</td>\n                    <td class=\"pt-4\">{{ item.month }}</td>\n                    <td class=\"pt-4\">{{ item.average }}</td>\n                  </tr>\n                  </tbody>\n                </table>\n              </md-card-content>\n            </md-card>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\n\nimport UsersAPI from \"../../packages/api/Users.js\";\nimport StatsAPI from \"../../packages/api/Stats.js\";\nimport _ from 'lodash';\nimport Multiselect from 'vue-multiselect'\nimport StatsCard from \"../../../src/components/Cards/StatsCard.vue\";\nimport ChartCard from \"../../../src/components/Cards/ChartCard.vue\";\n\nexport default {\n  components: { Multiselect, ChartCard, StatsCard },\n  data() {\n    return {\n      users: {\n        filters: {\n          user:{\n            active: {\n              id: null,\n              name: null,\n              type: null\n            },\n            options: [],\n            isLoading: false\n          }\n        }\n      },\n      performanceUser: {\n        data: {\n          labels: [],\n          series: [],\n          average: 0\n        },\n        options: {\n          low: 0,\n          high: 1,\n          chartPadding: {\n            top: 20,\n            right: 20,\n            bottom: 20,\n            left: 20\n          }\n        },\n      },\n      performanceOrders:{\n        data: {\n          labels: [],\n          series: [],\n        },\n        options: {\n          low: 0,\n          high: 1,\n          chartPadding: {\n            top: 20,\n            right: 20,\n            bottom: 20,\n            left: 25\n          }\n        },\n      },\n      performanceMeals:{\n        data: {\n          labels: [],\n          series: [],\n        },\n        options: {\n          low: 0,\n          high: 1,\n          chartPadding: {\n            top: 20,\n            right: 20,\n            bottom: 20,\n            left: 25\n          }\n        },\n      },\n      performanceMealsAverageTime:{\n        data: {\n          labels: [],\n          series: [],\n        },\n        options: {\n          low: 0,\n          high: 1,\n          chartPadding: {\n            top: 20,\n            right: 20,\n            bottom: 20,\n            left: 25\n          }\n        },\n      },\n      performanceOrdersAverageMinutesPerMoth: [],\n      topCardsData:{\n        averageTimeCostumerSpentMeal: '...',\n        totalNumberOrders: '...',\n        totalNumberMeals: '...',\n      }\n    }\n  },\n\n  methods: {\n    searchUsers(searchQuery){\n      if(searchQuery.length < 3){\n        return;\n      }\n\n      var options = [];\n      this.users.filters.user.isLoading = true;\n\n      UsersAPI.getSearchUser(searchQuery).then(r => {\n        this.users.filters.user.isLoading = false;\n        r.data.forEach(e => {\n          if(e.type === \"waiter\" || e.type === \"cook\"){\n            options.push({\n              id: e.id,\n              name: e.name + \" - \" + e.type,\n              type: e.type\n            });\n          }\n        });\n      });\n\n      this.users.filters.user.options = options;\n    },\n    getStatsUser(){\n      StatsAPI.getUserPerformance(this.users.filters.user.active).then(r => {\n        // Calculate the average asked in the US 39\n        let average = (_.sum(r.data.series)/r.data.series.length);\n        this.performanceUser.data.average = average.toFixed(2);\n\n        // Need to set padding of the graph since it doesn't do it automatically\n        // which is a shame.\n        this.setLowHighOptionsGraph(this.performanceUser.options, r.data.series);\n\n        this.performanceUser.data.labels = r.data.labels;\n        // Chartist's series needs to be an array inside of an array\n        this.performanceUser.data.series = [r.data.series];\n      });\n    },\n    getMealsHandled(){\n      StatsAPI.getMealsHandled().then(r => {\n        // Need to set padding of the graph since it doesn't do it automatically\n        // which is a shame.\n        this.setLowHighOptionsGraph(this.performanceMeals.options, r.data.series);\n\n        this.performanceMeals.data.labels = r.data.labels;\n        this.performanceMeals.data.series = [r.data.series];\n\n        // Calculate the total number of meals handled\n        this.topCardsData.totalNumberMeals = _.sum(r.data.series);\n      });\n    },\n    getOrdersHandled(){\n      StatsAPI.getOrdersHandled().then(r => {\n        // Need to set padding of the graph since it doesn't do it automatically\n        // which is a shame.\n        this.setLowHighOptionsGraph(this.performanceOrders.options, r.data.series);\n\n        this.performanceOrders.data.labels = r.data.labels;\n        this.performanceOrders.data.series = [r.data.series];\n\n        // Calculate total number of orders handled in this restaurant\n        this.topCardsData.totalNumberOrders = _.sum(r.data.series);\n      });\n    },\n    getAverageTimeMeal(){\n      StatsAPI.getAverageTimeSpentOnMeal().then(r => {\n        // Need to set padding of the graph since it doesn't do it automatically\n        // which is a shame.\n        this.setLowHighOptionsGraph(this.performanceMealsAverageTime.options, r.data.series);\n\n        this.performanceMealsAverageTime.data.labels = r.data.labels;\n        this.performanceMealsAverageTime.data.series = [r.data.series];\n\n        // Calculate the average on all months that a customer has spent in the restaurant\n        let average = (_.sum(r.data.series)/r.data.series.length);\n        this.topCardsData.averageTimeCostumerSpentMeal = average.toFixed(2);\n      });\n    },\n    getAverageMinutesOrdersPerMonth(){\n      StatsAPI.getAverageMinutesOrdersPerMonth().then(r => {\n        console.log(this.performanceOrdersAverageMinutesPerMoth.length);\n        this.performanceOrdersAverageMinutesPerMoth = r.data;\n        console.log(this.performanceOrdersAverageMinutesPerMoth);\n      });\n    },\n    // ---- AUX METHODS\n    setLowHighOptionsGraph(options, series){\n      options.low = 0;\n      options.high = _.max(series) + 80;\n    }\n  },\n  created(){\n    this.getOrdersHandled();\n    this.getMealsHandled();\n    this.getAverageTimeMeal();\n    this.getAverageMinutesOrdersPerMonth();\n  }\n};\n</script>\n\n<style scoped>\n  .bottom-column{\n    position: absolute;\n    bottom: 0px;\n  }\n\n  .text-small{\n    font-size: 10px !important;\n  }\n</style>\n"],"sourceRoot":"src/pages/Manager"}]}