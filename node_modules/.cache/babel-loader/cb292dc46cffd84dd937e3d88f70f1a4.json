{"remainingRequest":"/home/alendouro/WebDevelopment/RestaurantManagementVueJS2/node_modules/babel-loader/lib/index.js!/home/alendouro/WebDevelopment/RestaurantManagementVueJS2/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/alendouro/WebDevelopment/RestaurantManagementVueJS2/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/alendouro/WebDevelopment/RestaurantManagementVueJS2/src/pages/Manager/Users.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/alendouro/WebDevelopment/RestaurantManagementVueJS2/src/pages/Manager/Users.vue","mtime":1546657944214},{"path":"/home/alendouro/WebDevelopment/RestaurantManagementVueJS2/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/alendouro/WebDevelopment/RestaurantManagementVueJS2/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/alendouro/WebDevelopment/RestaurantManagementVueJS2/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/alendouro/WebDevelopment/RestaurantManagementVueJS2/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.array.find-index\";\nimport \"core-js/modules/es6.function.name\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport MealsAPI from \"../../packages/api/Meals.js\";\nimport ItemsAPI from \"../../packages/api/Items.js\";\nimport OrderAPI from \"../../packages/api/Orders.js\";\nimport InvoiceAPI from \"../../packages/api/Invoice.js\";\nimport InvoiceItemsAPI from \"../../packages/api/InvoiceItems.js\";\nimport TablesAPI from \"../../packages/api/Tables.js\";\nimport UsersAPI from \"../../packages/api/Users.js\";\nimport { required, email } from 'vuelidate/lib/validators';\nimport toastr from 'toastr';\nimport _ from 'lodash';\nimport swal from \"sweetalert\";\nimport Multiselect from 'vue-multiselect';\nimport Datepicker from 'vuejs-datepicker';\nimport moment from 'moment';\nexport default {\n  components: {\n    Multiselect: Multiselect,\n    Datepicker: Datepicker\n  },\n  data: function data() {\n    return {\n      users: {\n        all: [],\n        edit: {\n          id: null,\n          name: null,\n          username: null,\n          email: null,\n          email_verified_at: null,\n          password: null,\n          type: null,\n          blocked: null,\n          photo_url: null,\n          last_shift_start: null,\n          last_shift_end: null,\n          deleted_at: null,\n          remember_token: null,\n          created_at: null,\n          updated_at: null\n        }\n      }\n    };\n  },\n  validations: {\n    users: {\n      edit: {\n        name: {\n          required: required\n        },\n        type: {\n          required: required\n        },\n        username: {\n          required: required\n        },\n        email: {\n          required: required,\n          email: email\n        },\n        blocked: {\n          required: required\n        }\n      }\n    }\n  },\n  methods: {\n    saveUser: function saveUser() {\n      var _this = this;\n\n      UsersAPI.updateUser(this.users.edit).then(function (r) {\n        if (r.status === 200) {\n          toastr.success(_this.users.edit.name + \" foi actualizado com sucesso\");\n          return;\n        }\n\n        if (r.status === 422) {\n          toastr.error('UNIQUE EMAIL', r.data.error.message);\n        }\n\n        if (r.status === 404) {\n          toastr.error('User was not found');\n        }\n      });\n    },\n    sendEmail: function sendEmail() {\n      // using SendGrid's v3 Node.js Library\n      // https://github.com/sendgrid/sendgrid-nodejs\n      var sgMail = require('@sendgrid/mail');\n\n      sgMail.setApiKey(process.env.SENDGRID_API_KEY);\n      var msg = {\n        to: 'miguelalendouro@gmail.com',\n        from: 'm1@mail.pt',\n        subject: 'Sending with SendGrid is Fun',\n        text: 'and easy to do anywhere, even with Node.js',\n        html: '<strong>and easy to do anywhere, even with Node.js</strong>'\n      };\n      sgMail.send(msg);\n    },\n    editUser: function editUser(user) {\n      this.users.edit = user;\n      window.scrollTo(0, 0);\n    },\n    deleteUser: function deleteUser(user) {\n      var _this2 = this;\n\n      // If the user is soft deleted we will throw an warning saying that this action will actually delete user form DB\n      if (user.deleted_at !== null) {\n        swal('Deleting user forever', 'By doing this you willtest permanently delete the user', 'warning', {\n          buttons: {\n            cancel: \"Not delete\",\n            catch: {\n              text: \"I would like to delete forever\",\n              value: true\n            }\n          }\n        }).then(function (deleteUserForever) {\n          if (deleteUserForever) {\n            UsersAPI.deleteUser(user, true).then(function (r) {\n              if (r.status === 404) {\n                toastr.error('NOT FOUND', 'User not found');\n                return;\n              }\n\n              if (r.status === 200) {\n                swal(\"SUCCESS\", \"User has been deleted permanently successfully\", 'success');\n\n                var users = _this2.users.all.slice(); // Change the deleted_at attribute of the current user\n\n\n                user.deleted_at = r.data.created_at.date; // Find the index where the current user is stored in all users\n\n                var index = _.findIndex(users, {\n                  id: user.id\n                }); // Replace user in the array with the user updated\n\n\n                user.splice(index, 1, user); // Change the whole collection of users so that vuejs can detect the change\n\n                _this2.users.all = users;\n              }\n            });\n          }\n        });\n        return;\n      }\n\n      swal('DELETE USER', 'Are you sure you would like to deleted this user?', 'warning', {\n        buttons: {\n          cancel: \"Not delete\",\n          catch: {\n            text: \"I would like to delete\",\n            value: true\n          }\n        }\n      }).then(function (deleteUser) {\n        if (deleteUser) {\n          UsersAPI.deleteUser(user, false).then(function (r) {\n            if (r.status === 404) {\n              toastr.error('NOT FOUND', 'User not found');\n              return;\n            }\n\n            if (r.status === 200) {\n              swal(\"SUCCESS\", \"User has been deleted permanently successfully\", 'success');\n            }\n          });\n        }\n      });\n    },\n    groupedItems: function groupedItems(items, columns) {\n      return _.chunk(items, columns);\n    },\n    getUsers: function getUsers() {\n      var _this3 = this;\n\n      UsersAPI.getUsers([], true).then(function (r) {\n        _this3.users.all = r.data;\n      });\n    }\n  },\n  created: function created() {\n    this.getUsers();\n  }\n};",{"version":3,"sources":["Users.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <div class=\"content\">\n    <div class=\"md-layout\">\n      <div class=\"md-layout-item\">\n        <div class=\"row\">\n          <div class=\"col-md-6\">\n            <div class=\"form-group\">\n              <label for=\"user_name\">Name</label>\n              <input type=\"text\" id=\"user_name\" class=\"form-control\"\n                     @input=\"$v.users.edit.name.$touch()\"\n                     v-model=\"users.edit.name\">\n              <p class=\"error-message\" v-if=\"!$v.users.edit.name.required\">Name must not be empty</p>\n            </div>\n          </div>\n          <div class=\"col-md-6\">\n            <div class=\"form-group\">\n              <label for=\"user_username\">Username</label>\n              <input type=\"text\" id=\"user_username\" class=\"form-control\"\n                     @input=\"$v.users.edit.username.$touch()\"\n                     v-model=\"users.edit.username\">\n              <p class=\"error-message\" v-if=\"!$v.users.edit.username.required\">Username must not be empty</p>\n            </div>\n          </div>\n        </div>\n        <div class=\"row\">\n          <div class=\"col-md-6\">\n            <div class=\"form-group\">\n              <label for=\"user_email\">Email</label>\n              <input type=\"text\" id=\"user_email\" class=\"form-control\"\n                     @input=\"$v.users.edit.email.$touch()\"\n                     v-model=\"users.edit.email\">\n              <p class=\"error-message\" v-if=\"!$v.users.edit.email.required\">Email must not be empty</p>\n              <p class=\"error-message\" v-if=\"!$v.users.edit.email.email\">This is not a valid email format</p>\n            </div>\n          </div>\n          <div class=\"col-md-6\">\n            <div class=\"form-group\">\n              <label for=\"type\">Type</label>\n              <select class=\"custom-select\" id=\"user_type\"\n                      @input=\"$v.users.edit.type.$touch()\"\n                      v-model=\"users.edit.type\">\n                <option value=\"cashier\">Cashier</option>\n                <option value=\"waiter\">Waiter</option>\n                <option value=\"cook\">Cook</option>\n                <option value=\"manager\">Manager</option>\n              </select>\n              <p class=\"error-message\" v-if=\"!$v.users.edit.type.required\">Type must not be empty</p>\n            </div>\n          </div>\n        </div>\n        <div class=\"row\">\n          <div class=\"col-md-6\">\n          </div>\n          <div class=\"col-md-6\">\n            <div class=\"form-group\">\n              <label for=\"user_blocked\">Blocked</label>\n              <select class=\"custom-select\" id=\"user_blocked\"\n                      @input=\"$v.users.edit.blocked.$touch()\"\n                      v-model=\"users.edit.blocked\">\n                <option value=\"1\">Blocked</option>\n                <option value=\"0\">Not blocked</option>\n              </select>\n              <p class=\"error-message\" v-if=\"!$v.users.edit.blocked.required\">Blocked must not be empty</p>\n            </div>\n          </div>\n        </div>\n        <div class=\"row\">\n          <div class=\"col-sm-12\">\n            <md-button class=\"md-info md-block mt-1\" @click=\"saveUser()\" :disabled=\"$v.users.edit.$invalid\">SAVE USER</md-button>\n            <md-button class=\"m-0 md-info md-block mt-1\" @click=\"sendEmail()\">Send Email</md-button>\n          </div>\n        </div>\n        <div class=\"row\" v-for=\"users in groupedItems(this.users.all, 3)\" :key=\"users.id\">\n          <div class=\"col-md-4\" v-for=\"user in users\" :key=\"user.id\">\n            <md-card>\n              <md-card-header data-background-color=\"green\">\n                <h4 class=\"title\">{{user.name}}</h4>\n                <h5 class=\"title\">{{user.email}}</h5>\n                <h5 class=\"title\">{{user.type}}</h5>\n              </md-card-header>\n              <md-card-content>\n                <!--<img  text :src=\"imageItem(user.photo_url)\" :alt=\"user.name\">-->\n                <img  src=\"https://www.bnl.gov/today/body_pics/2017/06/stephanhruszkewycz-hr.jpg\" :alt=\"user.name\">\n                <br>\n                <div class=\"row\">\n                  <div class=\"col-md-12\">\n                    <md-button class=\"m-0 md-info md-block mt-1\" @click=\"editUser(user)\"><md-icon>edit</md-icon></md-button>\n                    <md-button class=\"m-0 md-danger md-block mt-1\" @click=\"deleteUser(user)\"><md-icon>delete_outline</md-icon></md-button>\n                  </div>\n                </div>\n              </md-card-content>\n            </md-card>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\n\nimport MealsAPI from \"../../packages/api/Meals.js\";\nimport ItemsAPI from \"../../packages/api/Items.js\";\nimport OrderAPI from \"../../packages/api/Orders.js\";\nimport InvoiceAPI from \"../../packages/api/Invoice.js\";\nimport InvoiceItemsAPI from \"../../packages/api/InvoiceItems.js\";\nimport TablesAPI from \"../../packages/api/Tables.js\";\nimport UsersAPI from \"../../packages/api/Users.js\";\nimport { required, email } from 'vuelidate/lib/validators'\nimport toastr from 'toastr';\nimport _ from 'lodash';\nimport swal from \"sweetalert\";\nimport Multiselect from 'vue-multiselect'\nimport Datepicker from 'vuejs-datepicker';\nimport moment from 'moment';\n\nexport default {\n  components: { Multiselect, Datepicker },\n  data() {\n    return {\n      users: {\n        all: [],\n        edit: {\n          id: null,\n          name: null,\n          username: null,\n          email: null,\n          email_verified_at: null,\n          password: null,\n          type: null,\n          blocked: null,\n          photo_url: null,\n          last_shift_start: null,\n          last_shift_end: null,\n          deleted_at: null,\n          remember_token: null,\n          created_at: null,\n          updated_at: null\n        }\n      },\n    }\n  },\n  validations: {\n    users:{\n      edit:{\n        name: {\n          required\n        },\n        type: {\n          required\n        },\n        username:{\n          required\n        },\n        email: {\n          required,\n          email\n        },\n        blocked:{\n          required\n        }\n      }\n    }\n  },\n  methods: {\n    saveUser(){\n      UsersAPI.updateUser(this.users.edit).then(r => {\n        if(r.status === 200){\n          toastr.success(this.users.edit.name + \" foi actualizado com sucesso\");\n          return;\n        }\n\n        if(r.status === 422){\n          toastr.error('UNIQUE EMAIL', r.data.error.message);\n        }\n\n        if(r.status === 404){\n          toastr.error('User was not found');\n        }\n      });\n    },\n    sendEmail(){\n      // using SendGrid's v3 Node.js Library\n      // https://github.com/sendgrid/sendgrid-nodejs\n      const sgMail = require('@sendgrid/mail');\n      sgMail.setApiKey(process.env.SENDGRID_API_KEY);\n      const msg = {\n        to: 'miguelalendouro@gmail.com',\n        from: 'm1@mail.pt',\n        subject: 'Sending with SendGrid is Fun',\n        text: 'and easy to do anywhere, even with Node.js',\n        html: '<strong>and easy to do anywhere, even with Node.js</strong>',\n      };\n      sgMail.send(msg);\n    },\n    editUser(user){\n      this.users.edit = user;\n      window.scrollTo(0, 0);\n    },\n    deleteUser(user){\n      // If the user is soft deleted we will throw an warning saying that this action will actually delete user form DB\n      if(user.deleted_at !== null){\n        swal('Deleting user forever', 'By doing this you willtest permanently delete the user', 'warning',{\n          buttons:{\n            cancel: \"Not delete\",\n            catch:{\n              text: \"I would like to delete forever\",\n              value: true\n            }\n          }\n        }).then(deleteUserForever => {\n          if(deleteUserForever){\n            UsersAPI.deleteUser(user, true).then(r => {\n              if(r.status === 404){\n                toastr.error('NOT FOUND', 'User not found');\n                return;\n              }\n\n              if(r.status === 200){\n                swal(\"SUCCESS\", \"User has been deleted permanently successfully\", 'success');\n\n                const users = this.users.all.slice();\n\n                // Change the deleted_at attribute of the current user\n                user.deleted_at = r.data.created_at.date;\n\n                // Find the index where the current user is stored in all users\n                let index = _.findIndex(users, {id: user.id});\n\n                // Replace user in the array with the user updated\n                user.splice(index, 1, user);\n\n                // Change the whole collection of users so that vuejs can detect the change\n                this.users.all = users;\n              }\n            });\n\n          }\n        });\n\n        return;\n      }\n\n      swal('DELETE USER', 'Are you sure you would like to deleted this user?', 'warning',{\n        buttons:{\n          cancel: \"Not delete\",\n          catch:{\n            text: \"I would like to delete\",\n            value: true\n          }\n        }\n      }).then(deleteUser => {\n        if(deleteUser){\n          UsersAPI.deleteUser(user, false).then(r => {\n            if(r.status === 404){\n              toastr.error('NOT FOUND', 'User not found');\n              return;\n            }\n\n            if(r.status === 200){\n              swal(\"SUCCESS\", \"User has been deleted permanently successfully\", 'success');\n            }\n\n          });\n\n        }\n      });\n\n    },\n    groupedItems(items, columns){\n      return _.chunk(items, columns);\n    },\n    getUsers(){\n      UsersAPI.getUsers([], true).then(r => {\n        this.users.all = r.data;\n      });\n    },\n  },\n  created(){\n    this.getUsers();\n  }\n};\n</script>\n"],"sourceRoot":"src/pages/Manager"}]}